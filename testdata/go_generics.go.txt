package generics

import (
	"context"
	"fmt"
)

// Generic types
type Stack[T any] struct {
	items []T
}

type Pair[K comparable, V any] struct {
	Key   K
	Value V
}

type Result[T any] struct {
	Value T
	Error error
}

// Generic interfaces
type Comparable[T any] interface {
	Compare(other T) int
}

type Container[T any] interface {
	Add(item T)
	Get(index int) (T, bool)
	Size() int
}

// Generic functions
func Map[T, U any](slice []T, fn func(T) U) []U {
	result := make([]U, len(slice))
	for i, v := range slice {
		result[i] = fn(v)
	}
	return result
}

func Filter[T any](slice []T, predicate func(T) bool) []T {
	var result []T
	for _, v := range slice {
		if predicate(v) {
			result = append(result, v)
		}
	}
	return result
}

func Reduce[T, U any](slice []T, initial U, fn func(U, T) U) U {
	result := initial
	for _, v := range slice {
		result = fn(result, v)
	}
	return result
}

// Generic methods
func (s *Stack[T]) Push(item T) {
	s.items = append(s.items, item)
}

func (s *Stack[T]) Pop() (T, bool) {
	if len(s.items) == 0 {
		var zero T
		return zero, false
	}
	item := s.items[len(s.items)-1]
	s.items = s.items[:len(s.items)-1]
	return item, true
}

func (s *Stack[T]) Peek() (T, bool) {
	if len(s.items) == 0 {
		var zero T
		return zero, false
	}
	return s.items[len(s.items)-1], true
}

func (s *Stack[T]) Size() int {
	return len(s.items)
}

func (p Pair[K, V]) String() string {
	return fmt.Sprintf("(%v, %v)", p.Key, p.Value)
}

// Type constraints
type Ordered interface {
	~int | ~int8 | ~int16 | ~int32 | ~int64 |
		~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64 | ~uintptr |
		~float32 | ~float64 |
		~string
}

type Numeric interface {
	~int | ~int8 | ~int16 | ~int32 | ~int64 |
		~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64 | ~uintptr |
		~float32 | ~float64
}

// Functions with constraints
func Max[T Ordered](a, b T) T {
	if a > b {
		return a
	}
	return b
}

func Sum[T Numeric](values ...T) T {
	var sum T
	for _, v := range values {
		sum += v
	}
	return sum
}

// Generic struct with methods
type Cache[K comparable, V any] struct {
	data map[K]V
}

func NewCache[K comparable, V any]() *Cache[K, V] {
	return &Cache[K, V]{
		data: make(map[K]V),
	}
}

func (c *Cache[K, V]) Set(key K, value V) {
	c.data[key] = value
}

func (c *Cache[K, V]) Get(key K) (V, bool) {
	value, exists := c.data[key]
	return value, exists
}

func (c *Cache[K, V]) Delete(key K) {
	delete(c.data, key)
}

func (c *Cache[K, V]) Keys() []K {
	keys := make([]K, 0, len(c.data))
	for k := range c.data {
		keys = append(keys, k)
	}
	return keys
}

// Context-aware generic function
func ProcessWithContext[T any](ctx context.Context, items []T, processor func(context.Context, T) error) error {
	for _, item := range items {
		select {
		case <-ctx.Done():
			return ctx.Err()
		default:
			if err := processor(ctx, item); err != nil {
				return err
			}
		}
	}
	return nil
} 