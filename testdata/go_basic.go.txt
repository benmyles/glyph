package main

import (
	"fmt"
	"log"
	"net/http"
)

// Constants
const (
	Version = "1.0.0"
	MaxSize = 100
)

const DefaultPort = 8080

// Variables
var (
	GlobalCounter int
	ServerName    string = "glyph-server"
)

var isDebug bool

// Type definitions
type UserID int64

type Config struct {
	Port     int    `json:"port"`
	Host     string `json:"host"`
	Database string `json:"database"`
}

type Status int

const (
	StatusPending Status = iota
	StatusRunning
	StatusComplete
)

// Interface
type Handler interface {
	Handle(request *http.Request) error
	GetName() string
}

type Logger interface {
	Log(message string)
	LogError(err error)
}

// Functions
func main() {
	fmt.Println("Starting server...")
	server := NewServer()
	server.Start()
}

func NewServer() *Server {
	return &Server{
		config: Config{
			Port: DefaultPort,
			Host: "localhost",
		},
	}
}

func processRequest(req *http.Request) (*Response, error) {
	if req == nil {
		return nil, fmt.Errorf("request cannot be nil")
	}
	return &Response{Status: "ok"}, nil
}

// Struct with methods
type Server struct {
	config Config
	logger Logger
}

func (s *Server) Start() error {
	log.Printf("Server starting on %s:%d", s.config.Host, s.config.Port)
	return http.ListenAndServe(fmt.Sprintf(":%d", s.config.Port), nil)
}

func (s *Server) Stop() {
	log.Println("Server stopping...")
}

func (s *Server) GetConfig() Config {
	return s.config
}

func (s *Server) SetLogger(logger Logger) {
	s.logger = logger
}

// Response type
type Response struct {
	Status  string `json:"status"`
	Message string `json:"message,omitempty"`
	Data    any    `json:"data,omitempty"`
} 